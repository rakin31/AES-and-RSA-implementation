# This is a sample Python script.

# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.
# -*- coding: utf-8 -*-
"""BitVectorDemo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NoLVEBqkvrHwoYoEuxX0BeJvaJ5MtVrA
"""

#pip install BitVector

import numpy as np
import math
import time
"""Tables"""

from BitVector import *
Sbox = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

InvSbox = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)

Mixer = [
    [BitVector(hexstring="02"), BitVector(hexstring="03"), BitVector(hexstring="01"), BitVector(hexstring="01")],
    [BitVector(hexstring="01"), BitVector(hexstring="02"), BitVector(hexstring="03"), BitVector(hexstring="01")],
    [BitVector(hexstring="01"), BitVector(hexstring="01"), BitVector(hexstring="02"), BitVector(hexstring="03")],
    [BitVector(hexstring="03"), BitVector(hexstring="01"), BitVector(hexstring="01"), BitVector(hexstring="02")]
]

InvMixer = [
    [BitVector(hexstring="0E"), BitVector(hexstring="0B"), BitVector(hexstring="0D"), BitVector(hexstring="09")],
    [BitVector(hexstring="09"), BitVector(hexstring="0E"), BitVector(hexstring="0B"), BitVector(hexstring="0D")],
    [BitVector(hexstring="0D"), BitVector(hexstring="09"), BitVector(hexstring="0E"), BitVector(hexstring="0B")],
    [BitVector(hexstring="0B"), BitVector(hexstring="0D"), BitVector(hexstring="09"), BitVector(hexstring="0E")]
]

prev_round_const = 0
round_no = 0
prev_round_const_d = 0
round_no_d = 0
round_key_e = []
round_key_d = []
# b = BitVector(hexstring="4E")
# int_val = b.intValue()
# s = Sbox[int_val]
# s = BitVector(intVal=s, size=8)
# print(s.get_bitvector_in_hex())
#
# AES_modulus = BitVector(bitstring='100011011')
#
# bv1 = BitVector(hexstring="02")
# bv2 = BitVector(hexstring="63")
# bv3 = bv1.gf_multiply_modular(bv2, AES_modulus, 8)
# print(bv3)

def print_hi(name):
    # Use a breakpoint in the code line below to debug your script.
    print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.

def convertTomatrix(key,t):
    split = [key[i:i+2] for i in range(0, len(key),2)]
    #print(split[0])
    key_mat = np.array([[split[0],split[1],split[2],split[3]],
                       [split[4],split[5],split[6],split[7]],
                       [split[8],split[9],split[10],split[11]],
                       [split[12],split[13],split[14],split[15]]])
    if t == 1 :
        key_mat = key_mat.transpose()
    #print(key_mat)
    return key_mat
    # put it back together
    #joined = bytes(split)

def convertmatrixtolist(matrix):
    list=[]
    for i in range(0,len(matrix)):
        for j in range(0,len(matrix[0])):
            list.append(matrix[i][j])
    return list

def generate_round_keyfordecryption(key_mat):
    key_mat2 = np.copy(key_mat)
    #key_mat2 = key_mat2.transpose()
    #print(key_mat[len(key_mat)-1])
    word = circularByteleftshift(key_mat2[len(key_mat)-1])
    #print(word)
    word2 = bytesubstitution(word)
    #print(word2)
    word3 = addroundconstant_d(word2)
    #print(word3)
    b1 = BitVector(hexstring=word3)
    b2 = BitVector(hexstring=coverttostring(key_mat2[0]))
    word4 = b1 ^ b2
    #print(word4.get_bitvector_in_hex())
    word4 = word4.get_bitvector_in_hex()
    split = [word4[i:i + 2] for i in range(0, len(word4), 2)]
    list=[]
    for i in range(0,4):
        list.append(split[i])
    #print(list)
    #print(key_mat[0])
    key_mat2[0] = list
    #print(key_mat)
    for i in range (0,3):
        word1 = doxoroperation(key_mat2[i],key_mat2[i+1])
        key_mat2[i+1] = converttolist(word1)
    #print(key_mat)
    #key_mat2 = np.copy(key_mat)
    global round_key_d
    round_key_d.append(convertmatrixtolist(key_mat2))
    #print(round_key_d)
    return key_mat2

def generate_round_key(key_mat):
    key_mat = key_mat.transpose()
    #print(key_mat[len(key_mat)-1])
    word = circularByteleftshift(key_mat[len(key_mat)-1])
    word2 = bytesubstitution(word)
    word3 = addroundconstant(word2)
    b1 = BitVector(hexstring=word3)
    b2 = BitVector(hexstring=coverttostring(key_mat[0]))
    word4 = b1 ^ b2
    #print(word4.get_bitvector_in_hex())
    word4 = word4.get_bitvector_in_hex()
    split = [word4[i:i + 2] for i in range(0, len(word4), 2)]
    list=[]
    for i in range(0,4):
        list.append(split[i])
    #print(list)
    #print(key_mat[0])
    key_mat[0] = list
    #print(key_mat)
    for i in range (0,3):
        word1 = doxoroperation(key_mat[i],key_mat[i+1])
        key_mat[i+1] = converttolist(word1)
    #print(key_mat)
    key_mat2 = np.copy(key_mat)
    global round_key_e
    round_key_e.append(convertmatrixtolist(key_mat2))
    return key_mat2

def converttolist(word):
    split = [word[i:i + 2] for i in range(0, len(word), 2)]
    list = []
    for i in range(0, 4):
        list.append(split[i])
    #print(list)
    return list

def doxoroperation(word1,word2):
    b1 = BitVector(hexstring=coverttostring(word1))
    b2 = BitVector(hexstring=coverttostring(word2))
    word = b1 ^ b2
    return word.get_bitvector_in_hex()

def coverttostring(word):
    a = ""
    for i in range(0, len(word)):
        a = a + word[i]
    return a

def convertMatrixtostring(matrix):
    str=""
    for i in range(0,len(matrix)):
        for j in range(0,len(matrix[i])):
            str = str + matrix[i][j]
    #print(str)
    return str

def circularByteleftshift(word):
    a = ""
    for i in range(0,len(word)):
        a = a + word[i]
    #print(a)
    bv = BitVector(hexstring=a)
    bv << 8
    #print(bv.get_bitvector_in_hex())
    return bv.get_bitvector_in_hex()

def bytesubstitution(word):
    split = [word[i:i + 2] for i in range(0, len(word), 2)]
    finalword=""
    for i in range(0,len(split)):
        b = BitVector(hexstring=split[i])
        int_val = b.intValue()
        s = Sbox[int_val]
        s = BitVector(intVal=s, size=8)
        finalword =  finalword + s.get_bitvector_in_hex()
        #print(s.get_bitvector_in_hex())
    #print(finalword)
    return finalword

def generateroundconstant_d():
    global prev_round_const_d
    if round_no_d == 1 :
        prev_round_const_d = 1
        return 1
    elif round_no_d > 1 and hex(prev_round_const_d) < hex(128):
        rc = 2*prev_round_const_d
        prev_round_const_d = rc
        return rc
    elif round_no_d>1 and hex(prev_round_const_d) >= hex(128):
        rc = ((2*prev_round_const_d) ^ 283)
        prev_round_const_d = rc
        return rc

def generateroundconstant():
    global prev_round_const
    if round_no == 1 :
        prev_round_const = 1
        return 1
    elif round_no>1 and hex(prev_round_const) < hex(128):
        rc = 2*prev_round_const
        prev_round_const = rc
        return rc
    elif round_no>1 and hex(prev_round_const) >= hex(128):
        rc = ((2*prev_round_const) ^ 283)
        prev_round_const = rc
        return rc

def addroundconstant_d(word):
    x = generateroundconstant_d()
    #print(x)
    #print(word)
    split = [word[i:i + 2] for i in range(0, len(word), 2)]
    b1 = BitVector(hexstring=word)
    b2 = BitVector(intVal=x, size=32)
    b2 = b2 << 24
    #print(b1.get_bitvector_in_hex())
    #print(b2.get_bitvector_in_hex())
    b3 = b1 ^ b2
    #print(b3.get_bitvector_in_hex())
    return b3.get_bitvector_in_hex()

def addroundconstant(word):
    x = generateroundconstant()
    #print(x)
    #print(word)
    split = [word[i:i + 2] for i in range(0, len(word), 2)]
    b1 = BitVector(hexstring=word)
    b2 = BitVector(intVal=x, size=32)
    b2 = b2 << 24
    #print(b1.get_bitvector_in_hex())
    #print(b2.get_bitvector_in_hex())
    b3 = b1 ^ b2
    #print(b3.get_bitvector_in_hex())
    return b3.get_bitvector_in_hex()

def matrixoroperation(mat1,mat2):
    b1 = BitVector(hexstring=mat1)
    b2 = BitVector(hexstring=mat2)
    b3 = b1^b2
    return convertTomatrix(b3.get_bitvector_in_hex(),0)

def subBytes_d(matrix):
    str = ""
    list=[]
    for i in range(0,len(matrix)):
        for j in range(0,len(matrix[i])):
            str = str + matrix[i][j]
            b = BitVector(hexstring=str)
            int_val = b.intValue()
            s = InvSbox[int_val]
            s = BitVector(intVal=s, size=8)
            #print(s.get_bitvector_in_hex())
            list.append(s.get_bitvector_in_hex())
            str=""
        matrix[i] = list
        list.clear()
    #print(matrix)
    matrix2 = np.copy(matrix)
    return matrix2

def subBytes(matrix):
    str = ""
    list=[]
    for i in range(0,len(matrix)):
        for j in range(0,len(matrix[i])):
            str = str + matrix[i][j]
            b = BitVector(hexstring=str)
            int_val = b.intValue()
            s = Sbox[int_val]
            s = BitVector(intVal=s, size=8)
            #print(s.get_bitvector_in_hex())
            list.append(s.get_bitvector_in_hex())
            str=""
        matrix[i] = list
        list.clear()
    #print(matrix)
    matrix2 = np.copy(matrix)
    return matrix2

def shiftrow_d(matrix):
    for i in range(0,4):
        str = coverttostring(matrix[i])
        #print(str)
        b = BitVector(hexstring=str)
        b >> i*8
        #print(b.get_bitvector_in_hex())
        matrix[i] = converttolist(b.get_bitvector_in_hex())
        #print(matrix[i])
    #print(matrix)
    matrix2 = np.copy(matrix)
    return matrix2

def shiftrow(matrix):
    for i in range(0,4):
        str = coverttostring(matrix[i])
        #print(str)
        b = BitVector(hexstring=str)
        b << i*8
        #print(b.get_bitvector_in_hex())
        matrix[i] = converttolist(b.get_bitvector_in_hex())
        #print(matrix[i])
    #print(matrix)
    matrix2 = np.copy(matrix)
    return matrix2

def converttonparray(matrix):
    list=[]
    #print(len(matrix))
    for i in range(0,len(matrix)):
        for j in range(0,len(matrix[0])):
            list.append(matrix[i][j].get_bitvector_in_hex())
    x = np.array(list)
    #print(x)
    shape = (4,4)
    x = x.reshape(shape)
    #print(x)
    return x

def convertlisttonparray(list):
    x = np.array(list)
    #print(x)
    shape = (4,4)
    x = x.reshape(shape)
    #print(x)
    return x

def convertbitvecmatrix(matrix):
    str = ""
    list = []
    list2 = []
    bitmatrix = [None]*len(matrix)
    for i in range(0,len(matrix)):
        for j in range(0,len(matrix[0])):
            str = str + matrix[i][j]
            b = BitVector(hexstring=str)
            list.append(b)
            str=""
        #print(list[0])
        # for k in range(0,len(list)):
        #     list2.append(list[k])
        bitmatrix[i] = list.copy()
        list.clear()
    #print(bitmatrix[0][0])
    return bitmatrix

def mixcolumnmultiplication_d(matrix):
    list = []
    AES_modulus = BitVector(bitstring='100011011')
    bv1 = BitVector(hexstring="00")
    # bv1 = BitVector(hexstring="02")
    # bv2 = BitVector(hexstring="63")
    # bv3 = bv1.gf_multiply_modular(bv2, AES_modulus, 8)
    # print(bv3)
    #printmatrix(Mixer)
    #printmatrix(matrix)
    list = []
    new_mat = [None]*len(matrix)
    for i in range(0, len(matrix)):
        for j in range (0, len(matrix[0])):
            for k in range(0, len(matrix)):
                bv2 = InvMixer[i][k].gf_multiply_modular(matrix[k][j],AES_modulus,8)
                bv3 = bv2 ^ bv1
                bv1 = bv3
            #print("here")
            #print(bv3.get_bitvector_in_hex())
            list.append(bv3)
            bv1 = BitVector(hexstring="00")
        new_mat[i] = list.copy()
        list.clear()

    #printmatrix(new_mat)
    new_mat = converttonparray(new_mat)
    return new_mat

def mixcolumnmultiplication(matrix):
    list = []
    AES_modulus = BitVector(bitstring='100011011')
    bv1 = BitVector(hexstring="00")
    # bv1 = BitVector(hexstring="02")
    # bv2 = BitVector(hexstring="63")
    # bv3 = bv1.gf_multiply_modular(bv2, AES_modulus, 8)
    # print(bv3)
    #printmatrix(Mixer)
    #printmatrix(matrix)
    list = []
    new_mat = [None]*len(matrix)
    for i in range(0, len(matrix)):
        for j in range (0, len(matrix[0])):
            for k in range(0, len(matrix)):
                bv2 = Mixer[i][k].gf_multiply_modular(matrix[k][j],AES_modulus,8)
                bv3 = bv2 ^ bv1
                bv1 = bv3
            #print("here")
            #print(bv3.get_bitvector_in_hex())
            list.append(bv3)
            bv1 = BitVector(hexstring="00")
        new_mat[i] = list.copy()
        list.clear()

    #printmatrix(new_mat)
    new_mat = converttonparray(new_mat)
    return new_mat

def printmatrix(matrix):
    for i in range(0,len(matrix)):
        for j in range(0, len(matrix[0])):
            print(matrix[i][j].get_bitvector_in_hex()),
        print()

def roundKeygeneration_d(key_mat):
    key_mat2 = np.copy(key_mat)
    key_mat2 = key_mat2.transpose()
    global round_key_d
    round_key_d.append(convertmatrixtolist(key_mat2))
    # print(round_key_d)
    global round_no_d
    round_key = np.copy(key_mat2)
    for i in range(1, 11):
        round_no_d = i
        round_key = generate_round_keyfordecryption(round_key)
        # print(round_key_d)

def aesdecryption(encrypted_text, key_mat):
    block_size = 16
    encrypted_text = encrypted_text.replace(" ","")
    encrypted_text_copy = encrypted_text[:]
    no_of_blocks = (len(encrypted_text)/block_size)/2
    decry_txt = ""
    #print("in decryp,no of blocks: ",no_of_blocks)
    roundKeygeneration_d(key_mat)
    for i in range(0,int(no_of_blocks)):
        encrypted_text = encrypted_text_copy[0:block_size*2]
        encrypted_text_copy = encrypted_text_copy[2*block_size:]

        list_10 = round_key_d[len(round_key_d)-1]
        #print(list_10)
        round_key = convertlisttonparray(list_10)
        state_matrix = matrixoroperation(encrypted_text, convertMatrixtostring(round_key))
        state_matrix = state_matrix.transpose()
        #print("after adding key")
        #print(state_matrix)
        for i in range(1,10):
            state_matrix = shiftrow_d(state_matrix)
            #print(state_matrix)
            state_matrix = subBytes_d(state_matrix)
            #print(state_matrix)
            round_key_l = round_key_d[len(round_key_d)-(i+1)]
            #print(round_key_l)
            round_key = convertlisttonparray(round_key_l)
            #print(round_key)
            round_key = round_key.transpose()
            #print(type(round_key))
            #print("here")
            #print(round_key)
            state_matrix = matrixoroperation(convertMatrixtostring(state_matrix), convertMatrixtostring(round_key))
            #print(state_matrix)
            state_matrix = mixcolumnmultiplication_d(convertbitvecmatrix(state_matrix))
            #print(state_matrix)
        state_matrix = shiftrow_d(state_matrix)
        #print(state_matrix)
        state_matrix = subBytes_d(state_matrix)
        #print(state_matrix)
        list_0 = round_key_d[0]
        round_key = convertlisttonparray(list_0)
        round_key = round_key.transpose()
        state_matrix = matrixoroperation(convertMatrixtostring(state_matrix), convertMatrixtostring(round_key))
        #round_key_d.clear()
        #print("Decryption ")
        #print(state_matrix)
        print("Deciphered Text : ")
        print(encryptedtext(state_matrix), "    [in hex]")
        print(encryptedtextinascii(state_matrix), "    [in ascii]")
        print()
        decry_txt = decry_txt + decryptedtext(state_matrix)
        #print(decry_txt)
    print("Using AES algorithm the decrypted text : ")
    print(decry_txt)
    print()
def decryptedtext(matrix):
    pad = "#"
    mat2 = np.copy(matrix)
    mat2 = mat2.transpose()
    str = ""
    for i in range(0,len(mat2)):
        for j in range(0,len(mat2[0])):
            str = str + chr(int(mat2[i][j],16))
    #print(str)
    #bytes_object = bytes.fromhex(str)
    #ascii_string = bytes_object.decode("ASCII")
    str = str.replace(pad,"")
    return str

def roundKeygeneration(key_mat):
    round_key_s = np.copy(key_mat)
    round_key_s = round_key_s.transpose()
    global round_key_e
    round_key_e.append(convertmatrixtolist(round_key_s))
    # print(round_key_e)
    global round_no
    round_key_s2 = np.copy(round_key_s)
    for i in range(1, 11):
        round_no = i
        round_key_s2 = generate_round_key(round_key_s2.transpose())

def aesencryption(plain_text, key_mat):
    key_mat2 = np.copy(key_mat)
    state_matrix = matrixoroperation(convertMatrixtostring(plain_text), convertMatrixtostring(key_mat2))
    #print("#######Round 0########")
    #print(state_matrix)
    # state_matrix = subBytes(state_matrix)
    # state_matrix = shiftrow(state_matrix)
    # state_matrix = mixcolumnmultiplication(convertbitvecmatrix(state_matrix))
    #global round_no
    for i in range(1, 10):
        round_no = i
        #print(" round key :"),
        #print(round_no)
        #print("#######Round %d#####",i)
        round_key = convertlisttonparray(round_key_e[i])
        #print(round_key)
        #print("After sub bytes")
        state_matrix = subBytes(state_matrix)
        #print(state_matrix)
        #print(state_matrix)
        #print("after shift row")
        state_matrix = shiftrow(state_matrix)
        #print(state_matrix)
        #print("after mix column")
        state_matrix = mixcolumnmultiplication(convertbitvecmatrix(state_matrix))
        #print(state_matrix)
        round_key = round_key.transpose()
        #print("round key")
        #print(round_key)
        #print("After adding round key")
        state_matrix = matrixoroperation(convertMatrixtostring(state_matrix), convertMatrixtostring(round_key))
        #print("state matrix : ")
        #print(state_matrix)
    round_key = convertlisttonparray(round_key_e[len(round_key_e)-1])
    round_key = round_key.transpose()
    #print("#####Final round#######")
    #print("after sub bytes")
    state_matrix = subBytes(state_matrix)
    #print(state_matrix)
    #print("after shift row")
    state_matrix = shiftrow(state_matrix)
    #print(state_matrix)
    #print("Round key")
    #print(round_key)
    #print("After adding round key")
    state_matrix = matrixoroperation(convertMatrixtostring(state_matrix), convertMatrixtostring(round_key))
    #print(state_matrix)
    #print("encrypted text ")
    #print(state_matrix)
    #round_key_e.clear()
    #encryptedtextinascii(state_matrix)
    print("Cipher Text : ")
    print(encryptedtext(state_matrix), "    [in hex]")
    print(encryptedtextinascii(state_matrix), "    [in ascii]")
    print()
    return encryptedtext(state_matrix)

def encryptedtextinascii(matrix):
    mat2 = np.copy(matrix)
    mat2 = mat2.transpose()
    str = ""
    for i in range(0,len(mat2)):
        for j in range(0,len(mat2[0])):
            str = str + chr(int(mat2[i][j],16))

    #print(str)
    #bytes_object = bytes.fromhex(str)
    #str = bytes_object.decode("ASCII")
    #print(str)
    return str

def encryptedtext(matrix):
    mat2 = np.copy(matrix)
    mat2 = mat2.transpose()
    str = ""
    for i in range(0,len(mat2)):
        for j in range(0,len(mat2[0])):
            str = str + mat2[i][j]
    #print(str)
    return str

def printhex(matrix):
    mat2 = np.copy(matrix)
    mat2 = mat2.transpose()
    str = ""
    for i in range(0,len(mat2)):
        for j in range(0,len(mat2[0])):
            str = str + mat2[i][j]
    #print(str)
    return str

def time_measure(plain_text, key):
    plain_text_real = plain_text[:]
    key_in_hex = key.encode('utf-8')
    # print(key_in_hex)
    hex_key = key_in_hex.hex()
    plain_text_in_hex = plain_text.encode('utf-8')
    plain_text_in_hex = plain_text_in_hex.hex()
    key_mat = convertTomatrix(hex_key, 1)
    # convertbitvecmatrix(key_mat)
    plain_text = convertTomatrix(plain_text_in_hex, 1)
    # print(plain_text)
    plain_text2 = np.copy(plain_text)
    key_mat2 = np.copy(key_mat)
    print("Plain text : ")
    print(plain_text_real, "    [in ascii]")
    print(printhex(plain_text), "    [in hex]")
    print()
    print("Key : ")
    print(key, "    [in ascii]")
    print(printhex(key_mat2), "    [in hex]")
    print()
    start = time.time()
    # print("abcd")
    roundKeygeneration(key_mat2)
    end = time.time()
    # key_gen_time = end - start
    # print(round_key_e)

    # print("here")
    # print(len(round_key_e))
    start2 = time.time()
    entxt = aesencryption(plain_text2, key_mat2)
    end2 = time.time()

    # print(key_mat2)
    start3 = time.time()
    aesdecryption(entxt, key_mat2)
    end3 = time.time()

    print("Key generation time : ", end - start, " s")
    print("Encryption time : ", end2 - start2, " s")
    print("Decryption time : ", end3 - start3, " s")

def aesImplementation():
    block_size = 16
    pad = "#"
    no_of_blocks = 0
    key = input("Enter the Key : ")
    #print(key)
    #print(hex_key)
    plain_text = input("Enter the plain text : ")
    plain_text_real = plain_text[:]
    #print(plain_text)
    no_of_blocks = len(plain_text)/block_size
    #print(no_of_blocks)
    if len(key) < block_size :
        key = key + (block_size - len(key))*pad
    elif len(key) > block_size:
        key = key[0:block_size]
    if len(plain_text) < block_size :
        plain_text = plain_text + (block_size - len(plain_text))*pad
        #common_algo
        time_measure(plain_text,key)
        # key_in_hex = key.encode('utf-8')
        # # print(key_in_hex)
        # hex_key = key_in_hex.hex()
        # plain_text_in_hex = plain_text.encode('utf-8')
        # plain_text_in_hex = plain_text_in_hex.hex()
        # key_mat = convertTomatrix(hex_key, 1)
        # # convertbitvecmatrix(key_mat)
        # plain_text = convertTomatrix(plain_text_in_hex, 1)
        # plain_text2 = np.copy(plain_text)
        # key_mat2 = np.copy(key_mat)
        # print("Plain text : ")
        # print(plain_text_real, "    [in ascii]")
        # print(printhex(plain_text), "    [in hex]")
        # print()
        # print("Key : ")
        # print(key, "    [in ascii]")
        # print(printhex(key_mat2), "    [in hex]")
        # print()
        # roundKeygeneration(key_mat2)
        # entxt = aesencryption(plain_text2, key_mat2)
        # # print(key_mat2)
        # #print("Cypher text : ")
        # #print(entxt, "    [in ascii]")
        # aesdecryption(entxt, key_mat2)
    # elif no_of_blocks > 1:
    #     plain_text = plain_text[0:block_size]

        # plain_text_in_hex = plain_text.encode('utf-8')
        # plain_text_in_hex = plain_text_in_hex.hex()
        # key_mat = convertTomatrix(hex_key, 1)
        # # convertbitvecmatrix(key_mat)
        # plain_text = convertTomatrix(plain_text_in_hex, 1)
        # plain_text2 = np.copy(plain_text)
        # key_mat2 = np.copy(key_mat)
        # entxt = aesencryption(plain_text2, key_mat2)
        # #print(key_mat2)
        # aesdecryption(entxt, key_mat2)
        # print(plain_text)
        # print(convertMatrixtostring(plain_text))
    elif no_of_blocks > 1 :
        plain_text_copy = plain_text[:]
        key_in_hex = key.encode('utf-8')
        # print(key_in_hex)
        hex_key = key_in_hex.hex()
        key_mat = convertTomatrix(hex_key, 1)
        key_mat2 = np.copy(key_mat)
        start = time.time()
        roundKeygeneration(key_mat2)
        end = time.time()
        key_gen_time = end - start
        plain_text_real_in_hex = plain_text_real.encode('utf-8')
        plain_text_real_in_hex = plain_text_real_in_hex.hex()
        plain_text_real_mat = convertTomatrix(plain_text_real_in_hex, 1)
        print("Plain text : ")
        print(plain_text_real, "    [in ascii]")
        print(printhex(plain_text_real_mat), "    [in hex]")
        print()
        print("Key : ")
        print(key, "    [in ascii]")
        print(printhex(key_mat2), "    [in hex]")
        print()
        entxt = ""
        encrypted_time = 0
        for i in range(0,math.ceil(no_of_blocks)):
            plain_text = plain_text_copy[0:block_size]
            plain_text_copy = plain_text_copy[block_size:]
            if len(plain_text_copy) < block_size :
                plain_text_copy = plain_text_copy + (block_size - len(plain_text_copy)) * pad
            plain_text_in_hex = plain_text.encode('utf-8')
            plain_text_in_hex = plain_text_in_hex.hex()
            # convertbitvecmatrix(key_mat)
            plain_text = convertTomatrix(plain_text_in_hex, 1)
            #print("plain text")
            #print(plain_text)
            plain_text2 = np.copy(plain_text)
            start2 = time.time()
            entxt = entxt + aesencryption(plain_text2, key_mat2)
            end2 = time.time()
            encrypted_time = encrypted_time + (end2 - start2)
            #print(entxt)
            #print(key_mat2)
        print("Using AES algorithn the encrypted text is : ")
        print(entxt)
        print()
        start3 = time.time()
        aesdecryption(entxt, key_mat2)
        end3 = time.time()
        decrypt_time = end3 - start3
        print("Key generation time : ", key_gen_time, " s")
        print("Encryption time : ", encrypted_time, " s")
        print("Decryption time : ", decrypt_time, " s")
        #print(plain_text)
        #print(convertMatrixtostring(plain_text))
    else:
        time_measure(plain_text,key)
        # key_in_hex = key.encode('utf-8')
        # # print(key_in_hex)
        # hex_key = key_in_hex.hex()
        # plain_text_in_hex = plain_text.encode('utf-8')
        # plain_text_in_hex = plain_text_in_hex.hex()
        # key_mat = convertTomatrix(hex_key, 1)
        # # convertbitvecmatrix(key_mat)
        # plain_text = convertTomatrix(plain_text_in_hex, 1)
        # #print(plain_text)
        # plain_text2 = np.copy(plain_text)
        # key_mat2 = np.copy(key_mat)
        # print("Plain text : ")
        # print(plain_text_real, "    [in ascii]")
        # print(printhex(plain_text), "    [in hex]")
        # print()
        # print("Key : ")
        # print(key, "    [in ascii]")
        # print(printhex(key_mat2), "    [in hex]")
        # print()
        # start = time.time()
        # #print("abcd")
        # roundKeygeneration(key_mat2)
        # end = time.time()
        #key_gen_time = end - start
        #print(round_key_e)

        #print("here")
        #print(len(round_key_e))
        # start2 = time.time()
        # entxt = aesencryption(plain_text2, key_mat2)
        # end2 = time.time()
        #
        # #print(key_mat2)
        # start3 = time.time()
        # aesdecryption(entxt, key_mat2)
        # end3 = time.time()
        #
        # print("Key generation time : ", end - start, " s")
        # print("Encryption time : ", end2 - start2, " s")
        # print("Decryption time : ", end3 - start3, " s")
        # print(plain_text)
        # print(convertMatrixtostring(plain_text))





# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    aesImplementation()


# See PyCharm help at https://www.jetbrains.com/help/pycharm/
